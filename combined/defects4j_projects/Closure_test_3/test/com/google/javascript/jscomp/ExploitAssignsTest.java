/*
 * Copyright 2006 The Closure Compiler Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.javascript.jscomp;

/**
 * Unit tests for {@link ExploitAssigns}
 *
 * @author nicksantos@google.com (Nick Santos)
 * @author acleung@google.com (Alan Leung)
 */
public class ExploitAssignsTest extends CompilerTestCase {

public void testNestedExprExploitation731() { 
     test("this.foo = null; this.bar = null; this.baz = null;", "this.baz = this.bar = this.foo = null"); 
     test("a = 3; this.foo = a; this.bar = a; this.baz = 3;", "this.baz = this.bar = this.foo = a = 3"); 
     test("a = 3; this.foo = a; this.bar = this.foo; this.baz = a;", "this.baz = this.bar = this.foo = a = 3"); 
     test("a = 3; this.foo = a; this.bar = 3; this.baz = this.foo;", "this.baz = this.bar = this.foo = a = 3"); 
     test("a = 3; this.foo = a; a = 3; this.bar = 3; " + "a = 3; this.baz = this.foo;", "this.baz = a = this.bar = a = this.foo = a = 3"); 
     test("a = 4; this.foo = a; a = 3; this.bar = 3; " + "a = 3; this.baz = this.foo;", "this.foo = a = 4; a = this.bar = a = 3; this.baz = this.foo"); 
     test("a = 3; this.foo = a; a = 4; this.bar = 3; " + "a = 3; this.baz = this.foo;", "this.foo = a = 3; a = 4; a = this.bar = 3; this.baz = this.foo"); 
     test("a = 3; this.foo = a; a = 3; this.bar = 3; " + "a = 4; this.baz = this.foo;", "this.bar = a = this.foo = a = 3; a = 4; this.baz = this.foo"); 
 }
  

  

  

  

  

  

  

  

  @Override
  protected CompilerPass getProcessor(Compiler compiler) {
    return new PeepholeOptimizationsPass(compiler,new ExploitAssigns());
  }
}
